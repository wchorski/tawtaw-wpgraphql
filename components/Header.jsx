import Head from 'next/head';
import Link from 'next/link';
import { useContext, useState } from 'react';
import { isEmpty } from 'lodash';
import {sanitize} from 'utils/sanitize';
import {StyledNavbarMain} from 'styles/NavbarMain.styled'

// import { BurgerIcon, TailwindIcon, Bag, User, Wishlist } from '../../icons';
import { FaBeer, FaHamburger, FaWind, FaShoppingBag, FaUserCircle,  } from 'react-icons/fa';
import { GiFallingStar } from 'react-icons/gi'
import { FaShoppingCart } from 'react-icons/fa'
import { BsFillCircleFill } from 'react-icons/bs'
// import { AppContext } from 'components/Context';

const Header = ( { data } ) => {

  // console.log('header stuff: ', data.edges);
	
	// const [ cart, setCart ] = useContext( AppContext );
	const { edges: headerMenuItems, siteDescription, siteLogoUrl, siteTitle, favicon } = data || {};
	
	const [ isMenuVisible, setMenuVisibility ] = useState( false );
	
	return (
		<>

      <Head>
        <title>{ siteTitle || 'The Site Title' }</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="icon" href={ favicon || '/favicon.ico' }/>
      </Head>

			<header className="header">

				<StyledNavbarMain className="menu-top">
        <div className="inner-cont">
						<div className="Logo">
							<Link href="/">
								<a className='siteLogo'>
									{
										siteLogoUrl ? (
											<img src={ siteLogoUrl } alt={ `${ siteTitle } logo` }
											     width="86"
											     height="86"/>
										) : <FaWind/>
									}
								</a>
							</Link>

							<span>
								<Link href="/" className='siteTitle'>
									<a dangerouslySetInnerHTML={{ __html: sanitize( siteTitle ) || 'The Site Title' }} />
								</Link>
								{ siteDescription ? <p>{ siteDescription }</p> : null }
							</span>
						</div>


						<div className="navwich block lg:hidden">
							<button
								onClick={ () => setMenuVisibility( ! isMenuVisible ) }
								className="">
								<FaHamburger className=""/>
							</button>
						</div>

            
						<div
            //! hide when done
							// className={ `menu-cont ${ isMenuVisible ? 'visible' : 'hidden' }` }
							className={ `menu-cont ${ isMenuVisible ? 'visible' : 'visible' }` }
            >
							<ul className="menu main">
								{ ! isEmpty( headerMenuItems ) && headerMenuItems.length ? headerMenuItems.map( menuItem => (
                  <li key={ menuItem?.node?.id }>
                    <Link href={ menuItem?.node?.url ?? '/' }>
                      <a dangerouslySetInnerHTML={ { __html: menuItem.node.label } }/>
                    </Link>
                  </li>
								) ) : null }
							</ul>

							<ul className="menu util">
                <li>
                  <a href="#responsive-header"
                    className="flex mt-4 lg:inline-block lg:mt-0 text-black hover:text-black mr-10">
                    <span className="flex flex-row items-center lg:flex-col">
                      <FaUserCircle className="mr-1 lg:mr-0"/>
                      Profile
                    </span>
                  </a>
                </li>
                <li>
                  <a href="#responsive-header"
                    className="flex mt-4 lg:inline-block lg:mt-0 text-black hover:text-black mr-10">
                    <span className="flex flex-row items-center lg:flex-col">
                      <GiFallingStar className="mr-1 lg:mr-0"/>
                      Wishlist
                    </span>
                  </a>
                </li>
                <li>
                  <Link href="/cart">
                    <a>
                    <span>
                      <FaShoppingCart />
                      <BsFillCircleFill />
                      {/* <span className="ml-1"> Cart { cart?.totalQty ? `(${cart?.totalQty})` : null }</span> */}
                    </span>
                    </a>
                  </Link>
                </li>
							</ul>

						</div>
        </div>
				</StyledNavbarMain>

			</header>
		</>
	);
};

export default Header;